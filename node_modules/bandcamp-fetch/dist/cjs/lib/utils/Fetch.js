"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FetchError = exports.fetchPage = exports.FetchMethod = void 0;
const url_1 = require("url");
const node_fetch_1 = __importDefault(require("node-fetch"));
const Cache_1 = require("./Cache");
var FetchMethod;
(function (FetchMethod) {
    FetchMethod["GET"] = "GET";
    FetchMethod["POST"] = "POST";
})(FetchMethod = exports.FetchMethod || (exports.FetchMethod = {}));
function fetchPage(url, jsonResponse, method, payload) {
    if (jsonResponse === undefined) {
        jsonResponse = false;
    }
    return Cache_1.Cache.getOrSet(Cache_1.CacheDataType.Page, getCacheKey(url, jsonResponse, payload), async () => {
        if (method === undefined) {
            method = FetchMethod.GET;
        }
        let response;
        if (method === FetchMethod.GET) {
            const urlObj = new url_1.URL(url);
            if (payload) {
                for (const [key, value] of Object.entries(payload)) {
                    urlObj.searchParams.set(key, value);
                }
            }
            try {
                response = await (0, node_fetch_1.default)(urlObj.toString());
            }
            catch (error) {
                throw new FetchError(error);
            }
        }
        else {
            const init = {
                method: 'POST',
                body: payload ? JSON.stringify(payload) : undefined,
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
            };
            try {
                response = await (0, node_fetch_1.default)(url, init);
            }
            catch (error) {
                throw new FetchError(error);
            }
        }
        if (response.status === 429) {
            throw new FetchError({
                message: '429 Too Many Requests',
                code: 429
            });
        }
        if (jsonResponse) {
            return response.json();
        }
        return response.text();
    });
}
exports.fetchPage = fetchPage;
function getCacheKey(url, jsonResponse, payload) {
    return url + (jsonResponse ? ':json' : ':html') +
        (payload ? `:${JSON.stringify(payload)}` : '');
}
class FetchError extends Error {
    constructor(payload) {
        super();
        if (payload?.message) {
            this.message = payload.message;
        }
        if (payload?.code) {
            this.code = payload.code;
        }
        if (payload?.stack) {
            this.stack = payload.stack;
        }
    }
}
exports.FetchError = FetchError;
//# sourceMappingURL=Fetch.js.map