{"version":3,"file":"Fetch.js","sourceRoot":"","sources":["../../../../src/lib/utils/Fetch.ts"],"names":[],"mappings":"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","sourcesContent":["import { URL } from 'url';\nimport fetch from 'node-fetch';\nimport { Cache, CacheDataType } from './Cache';\n\nexport enum FetchMethod {\n  GET = 'GET',\n  POST = 'POST'\n}\n\nexport function fetchPage(url: string, jsonResponse: true, method?: FetchMethod, payload?: Record<string, any>): Promise<any>;\nexport function fetchPage(url: string, jsonResponse?: boolean, method?: FetchMethod, payload?: Record<string, any>): Promise<string>;\nexport function fetchPage(url: string, jsonResponse?: boolean, method?: FetchMethod, payload?: Record<string, any>) {\n  if (jsonResponse === undefined) {\n    jsonResponse = false;\n  }\n  return Cache.getOrSet(CacheDataType.Page, getCacheKey(url, jsonResponse, payload), async () => {\n    if (method === undefined) {\n      method = FetchMethod.GET;\n    }\n    let response;\n    if (method === FetchMethod.GET) {\n      const urlObj = new URL(url);\n      if (payload) {\n        for (const [ key, value ] of Object.entries(payload)) {\n          urlObj.searchParams.set(key, value);\n        }\n      }\n      try {\n        response = await fetch(urlObj.toString());\n      }\n      catch (error) {\n        throw new FetchError(error);\n      }\n    }\n    else {\n      const init = {\n        method: 'POST',\n        body: payload ? JSON.stringify(payload) : undefined,\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n      };\n      try {\n        response = await fetch(url, init);\n      }\n      catch (error) {\n        throw new FetchError(error);\n      }\n    }\n    if (response.status === 429) {\n      throw new FetchError({\n        message: '429 Too Many Requests',\n        code: 429\n      });\n    }\n    if (jsonResponse) {\n      return response.json();\n    }\n    return response.text();\n  });\n}\n\nfunction getCacheKey(url: string, jsonResponse: boolean, payload?: Record<string, any>): string {\n  return url + (jsonResponse ? ':json' : ':html') +\n    (payload ? `:${JSON.stringify(payload)}` : '');\n}\n\nexport class FetchError extends Error {\n  code?: number;\n\n  constructor(payload: any) {\n    super();\n    if (payload?.message) {\n      this.message = payload.message;\n    }\n    if (payload?.code) {\n      this.code = payload.code;\n    }\n    if (payload?.stack) {\n      this.stack = payload.stack;\n    }\n  }\n}\n"]}