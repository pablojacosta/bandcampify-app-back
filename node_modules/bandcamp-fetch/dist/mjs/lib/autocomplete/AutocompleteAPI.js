import { URLS } from '../utils/Constants';
import { FetchMethod, fetchPage } from '../utils/Fetch';
import AutocompleteResultsParser from './AutocompleteResultsParser';
import Limiter from '../utils/Limiter';
export var AutocompleteItemType;
(function (AutocompleteItemType) {
    AutocompleteItemType["Tag"] = "Tag";
    AutocompleteItemType["Location"] = "Location";
})(AutocompleteItemType || (AutocompleteItemType = {}));
export default class AutocompleteAPI {
    static getSuggestions(params) {
        if (params.itemType === AutocompleteItemType.Tag) {
            return this.getAutocompleteTags(params);
        }
        return this.getAutocompleteLocations(params);
    }
    /**
     * @internal
     */
    static async getAutocompleteTags(params) {
        const payload = {
            search_term: params.query,
            count: params.limit || 5
        };
        const json = await fetchPage(URLS.AUTOCOMPLETE.TAG, true, FetchMethod.POST, payload);
        return AutocompleteResultsParser.parseTags(json);
    }
    /**
     * @internal
     */
    static async getAutocompleteLocations(params) {
        const payload = {
            q: params.query,
            n: params.limit || 5,
            geocoder_fallback: true
        };
        const json = await fetchPage(URLS.AUTOCOMPLETE.LOCATION, true, FetchMethod.POST, payload);
        return AutocompleteResultsParser.parseLocations(json);
    }
}
export class LimiterAutocompleteAPI extends AutocompleteAPI {
    static getSuggestions(params) {
        return Limiter.schedule(() => super.getSuggestions(params));
    }
}
//# sourceMappingURL=AutocompleteAPI.js.map