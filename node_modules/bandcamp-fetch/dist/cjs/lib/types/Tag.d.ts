import NameValuePair from '../utils/NameValuePair';
import Album from './Album';
import Track from './Track';
interface Tag {
    type: 'tag' | string;
    name: string;
    url: string;
    value?: string;
    related?: Tag[];
    isLocation?: boolean;
    imageUrls?: string[];
}
export interface TagList {
    tags: Omit<Tag, 'type'>[];
    locations: Omit<Tag, 'type'>[];
}
export interface AlbumHighlightsByTag {
    name: string;
    title: string;
    items: Album[];
}
export declare namespace ReleasesByTag {
    interface FilterValueNames {
        [k: string]: Record<string, string | number>;
    }
    interface FilterOption extends NameValuePair<string | number> {
        default?: boolean;
        selected?: boolean;
    }
    interface Filter {
        name: string;
        options: FilterOption[];
    }
}
export interface ReleasesByTag {
    items: Array<Album | Track>;
    hasMore: boolean;
    filters: Record<string, string | number | Array<string | number>>;
}
export default Tag;
//# sourceMappingURL=Tag.d.ts.map