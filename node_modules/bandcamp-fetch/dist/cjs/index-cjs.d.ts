import * as bcfetch from './index.js';
declare const _default: {
    album: typeof bcfetch.AlbumAPI;
    track: typeof bcfetch.TrackAPI;
    discovery: typeof bcfetch.DiscoveryAPI;
    image: typeof bcfetch.ImageAPI;
    band: typeof bcfetch.BandAPI;
    tag: typeof bcfetch.TagAPI;
    article: typeof bcfetch.ArticleAPI;
    show: typeof bcfetch.ShowAPI;
    fan: typeof bcfetch.FanAPI;
    search: typeof bcfetch.SearchAPI;
    autocomplete: typeof bcfetch.AutocompleteAPI;
    limiter: {
        album: typeof bcfetch.LimiterAlbumAPI;
        track: typeof bcfetch.LimiterTrackAPI;
        discovery: typeof bcfetch.LimiterDiscoveryAPI;
        image: typeof bcfetch.LimiterImageAPI;
        band: typeof bcfetch.LimiterBandAPI;
        tag: typeof bcfetch.LimiterTagAPI;
        article: typeof bcfetch.LimiterArticleAPI;
        show: typeof bcfetch.LimiterShowAPI;
        fan: typeof bcfetch.LimiterFanAPI;
        search: typeof bcfetch.LimiterSearchAPI;
        autocomplete: typeof bcfetch.LimiterAutocompleteAPI;
        updateSettings: typeof import("./lib/utils/Limiter.js").default.updateSettings;
    };
    cache: typeof bcfetch.Cache;
} & {
    AlbumAPI: typeof bcfetch.AlbumAPI;
    ArticleAPI: typeof bcfetch.ArticleAPI;
    BandAPI: typeof bcfetch.BandAPI;
    DiscoveryAPI: typeof bcfetch.DiscoveryAPI;
    FanAPI: typeof bcfetch.FanAPI;
    ImageAPI: typeof bcfetch.ImageAPI;
    ShowAPI: typeof bcfetch.ShowAPI;
    TagAPI: typeof bcfetch.TagAPI;
    TrackAPI: typeof bcfetch.TrackAPI;
    SearchAPI: typeof bcfetch.SearchAPI;
    AutocompleteAPI: typeof bcfetch.AutocompleteAPI;
    CacheDataType: typeof bcfetch.CacheDataType;
    Cache: typeof bcfetch.Cache;
    default: {
        album: typeof bcfetch.AlbumAPI;
        track: typeof bcfetch.TrackAPI;
        discovery: typeof bcfetch.DiscoveryAPI;
        image: typeof bcfetch.ImageAPI;
        band: typeof bcfetch.BandAPI;
        tag: typeof bcfetch.TagAPI;
        article: typeof bcfetch.ArticleAPI;
        show: typeof bcfetch.ShowAPI;
        fan: typeof bcfetch.FanAPI;
        search: typeof bcfetch.SearchAPI;
        autocomplete: typeof bcfetch.AutocompleteAPI;
        limiter: {
            album: typeof bcfetch.LimiterAlbumAPI;
            track: typeof bcfetch.LimiterTrackAPI;
            discovery: typeof bcfetch.LimiterDiscoveryAPI;
            image: typeof bcfetch.LimiterImageAPI;
            band: typeof bcfetch.LimiterBandAPI;
            tag: typeof bcfetch.LimiterTagAPI;
            article: typeof bcfetch.LimiterArticleAPI;
            show: typeof bcfetch.LimiterShowAPI;
            fan: typeof bcfetch.LimiterFanAPI;
            search: typeof bcfetch.LimiterSearchAPI;
            autocomplete: typeof bcfetch.LimiterAutocompleteAPI;
            updateSettings: typeof import("./lib/utils/Limiter.js").default.updateSettings;
        };
        cache: typeof bcfetch.Cache;
    };
    LimiterAlbumAPI: typeof bcfetch.LimiterAlbumAPI;
    LimiterDiscoveryAPI: typeof bcfetch.LimiterDiscoveryAPI;
    ImageFormatFilter: typeof bcfetch.ImageFormatFilter;
    LimiterImageAPI: typeof bcfetch.LimiterImageAPI;
    LimiterArticleAPI: typeof bcfetch.LimiterArticleAPI;
    LimiterBandAPI: typeof bcfetch.LimiterBandAPI;
    LimiterFanAPI: typeof bcfetch.LimiterFanAPI;
    LimiterShowAPI: typeof bcfetch.LimiterShowAPI;
    LimiterTagAPI: typeof bcfetch.LimiterTagAPI;
    LimiterTrackAPI: typeof bcfetch.LimiterTrackAPI;
    SearchItemType: typeof bcfetch.SearchItemType;
    LimiterSearchAPI: typeof bcfetch.LimiterSearchAPI;
    AutocompleteItemType: typeof bcfetch.AutocompleteItemType;
    LimiterAutocompleteAPI: typeof bcfetch.LimiterAutocompleteAPI;
};
export = _default;
//# sourceMappingURL=index-cjs.d.ts.map