{"version":3,"file":"TagListParser.js","sourceRoot":"","sources":["../../../../src/lib/tag/TagListParser.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,IAAI,WAAW,EAAE,MAAM,SAAS,CAAC;AAE9C,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAE9C,MAAM,CAAC,OAAO,OAAO,aAAa;IAChC,MAAM,CAAC,SAAS,CAAC,IAAY;QAC3B,MAAM,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;QAE5B,MAAM,QAAQ,GAAG,CAAC,MAAc,EAAE,OAAe,EAAE,IAAyB,EAAE,EAAE;YAC9E,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,MAAM,IAAI,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;QAClE,CAAC,CAAC;QAEF,MAAM,WAAW,GAAG,CAAC,EAAU,EAAE,EAAE;YACjC,MAAM,KAAK,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAC1B,MAAM,WAAW,GAAwB,EAAE,CAAC;YAC5C,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;gBACvC,MAAM,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;gBACvB,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;gBAClC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACjC,IAAI,IAAI,EAAE;oBACR,MAAM,GAAG,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;oBAC/B,IAAI,IAAI,IAAI,IAAI,KAAK,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,EAAE,WAAW,CAAC,EAAE,EAAE,+BAA+B;wBAClG,WAAW,CAAC,IAAI,CAAC;4BACf,IAAI;4BACJ,GAAG;yBACJ,CAAC,CAAC;qBACJ;iBACF;YACH,CAAC,CAAC,CAAC;YACH,OAAO,WAAW,CAAC;QACrB,CAAC,CAAC;QAEF,OAAO;YACL,IAAI,EAAE,WAAW,CAAC,YAAY,CAAC;YAC/B,SAAS,EAAE,WAAW,CAAC,iBAAiB,CAAC;SAC1C,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { load as cheerioLoad } from 'cheerio';\nimport Tag, { TagList } from '../types/Tag';\nimport { normalizeUrl } from '../utils/Parse';\n\nexport default class TagListParser {\n  static parseTags(html: string): TagList {\n    const $ = cheerioLoad(html);\n\n    const _findTag = (tagUrl: string, tagName: string, tags: Omit<Tag, 'type'>[]) => {\n      return tags.find((t) => t.url === tagUrl && t.name === tagName);\n    };\n\n    const _parseCloud = (id: string) => {\n      const cloud = $(`#${id}`);\n      const tagsInCloud: Omit<Tag, 'type'>[] = [];\n      cloud.find('a.tag').each((index, link) => {\n        const linkEl = $(link);\n        const name = linkEl.text().trim();\n        const href = linkEl.attr('href');\n        if (href) {\n          const url = normalizeUrl(href);\n          if (name && href !== '/tag/' && !_findTag(url, name, tagsInCloud)) { // Skip blank or repeating tags\n            tagsInCloud.push({\n              name,\n              url\n            });\n          }\n        }\n      });\n      return tagsInCloud;\n    };\n\n    return {\n      tags: _parseCloud('tags_cloud'),\n      locations: _parseCloud('locations_cloud')\n    };\n  }\n}\n"]}