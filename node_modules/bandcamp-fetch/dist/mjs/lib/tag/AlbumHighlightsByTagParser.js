import { load as cheerioLoad } from 'cheerio';
import { decode } from 'html-entities';
import { ParseError } from '../utils/Parse';
export default class AlbumHighlightsByTagParser {
    static parseHighlights(html, opts) {
        const $ = cheerioLoad(html);
        const blob = decode($('#pagedata[data-blob]').attr('data-blob'));
        let parsed;
        try {
            parsed = JSON.parse(blob);
        }
        catch (error) {
            throw new ParseError('Failed to parse album highlights by tag: JSON error in data-blob', html, error);
        }
        const collections = [];
        if (Array.isArray(parsed?.hub?.tabs?.[0]?.collections)) {
            parsed.hub.tabs[0].collections.forEach((collection) => {
                if (collection?.name && collection?.render?.title) {
                    const collectionRes = {
                        name: collection.name,
                        title: collection.render.title,
                        items: []
                    };
                    collection.items.forEach((item) => {
                        if (item?.item_type === 'a') {
                            const album = {
                                type: 'album',
                                name: item.title,
                                url: item.tralbum_url,
                                imageUrl: '',
                                genre: item.genre,
                                artist: {
                                    name: item.artist,
                                    url: item.band_url
                                }
                            };
                            if (item.art_id && opts.imageFormat?.id) {
                                album.imageUrl = `${opts.imageBaseUrl}/img/a${item.art_id}_${opts.imageFormat.id}.jpg`;
                            }
                            if (item.featured_track_title) {
                                album.featuredTrack = {
                                    name: item.featured_track_title,
                                    streamUrl: item.audio_url?.['mp3-128']
                                };
                            }
                            collectionRes.items.push(album);
                        }
                    });
                    if (collectionRes.items.length > 0) {
                        collections.push(collectionRes);
                    }
                }
            });
        }
        return collections;
    }
}
//# sourceMappingURL=AlbumHighlightsByTagParser.js.map