"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LimiterSearchAPI = exports.SearchItemType = void 0;
const url_1 = require("url");
const ImageAPI_1 = __importDefault(require("../image/ImageAPI"));
const Constants_1 = require("../utils/Constants");
const Fetch_1 = require("../utils/Fetch");
const SearchResultsParser_1 = __importDefault(require("./SearchResultsParser"));
const Limiter_1 = __importDefault(require("../utils/Limiter"));
var SearchItemType;
(function (SearchItemType) {
    SearchItemType["All"] = "All";
    SearchItemType["ArtistsAndLabels"] = "ArtistsAndLabels";
    SearchItemType["Albums"] = "Albums";
    SearchItemType["Tracks"] = "Tracks";
    SearchItemType["Fans"] = "Fans";
})(SearchItemType = exports.SearchItemType || (exports.SearchItemType = {}));
class SearchAPI {
    static async all(params) {
        return this.search({ ...params, itemType: SearchItemType.All });
    }
    static async artistsAndLabels(params) {
        return this.search({ ...params, itemType: SearchItemType.ArtistsAndLabels });
    }
    static async albums(params) {
        return this.search({ ...params, itemType: SearchItemType.Albums });
    }
    static async tracks(params) {
        return this.search({ ...params, itemType: SearchItemType.Tracks });
    }
    static async fans(params) {
        return this.search({ ...params, itemType: SearchItemType.Fans });
    }
    static async search(params) {
        const opts = {
            itemType: params.itemType || SearchItemType.All,
            albumImageFormat: await ImageAPI_1.default.getFormat(params.albumImageFormat, 9),
            artistImageFormat: await ImageAPI_1.default.getFormat(params.artistImageFormat, 21)
        };
        const html = await (0, Fetch_1.fetchPage)(this.getSearchUrl(params));
        return SearchResultsParser_1.default.parseResults(html, opts);
    }
    /**
     * @internal
     */
    static getSearchUrl(params) {
        const urlObj = new url_1.URL(Constants_1.URLS.SEARCH);
        urlObj.searchParams.set('q', params.query);
        urlObj.searchParams.set('page', (params.page || 1).toString());
        switch (params.itemType) {
            case SearchItemType.ArtistsAndLabels:
                urlObj.searchParams.set('item_type', 'b');
                break;
            case SearchItemType.Albums:
                urlObj.searchParams.set('item_type', 'a');
                break;
            case SearchItemType.Tracks:
                urlObj.searchParams.set('item_type', 't');
                break;
            case SearchItemType.Fans:
                urlObj.searchParams.set('item_type', 'f');
                break;
            default:
        }
        return urlObj.toString();
    }
}
exports.default = SearchAPI;
class LimiterSearchAPI extends SearchAPI {
    static async all(params) {
        return Limiter_1.default.schedule(() => super.all(params));
    }
    static async artistsAndLabels(params) {
        return Limiter_1.default.schedule(() => super.artistsAndLabels(params));
    }
    static async albums(params) {
        return Limiter_1.default.schedule(() => super.albums(params));
    }
    static async tracks(params) {
        return Limiter_1.default.schedule(() => super.tracks(params));
    }
    static async fans(params) {
        return Limiter_1.default.schedule(() => super.fans(params));
    }
}
exports.LimiterSearchAPI = LimiterSearchAPI;
//# sourceMappingURL=SearchAPI.js.map