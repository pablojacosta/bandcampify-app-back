"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LimiterAutocompleteAPI = exports.AutocompleteItemType = void 0;
const Constants_1 = require("../utils/Constants");
const Fetch_1 = require("../utils/Fetch");
const AutocompleteResultsParser_1 = __importDefault(require("./AutocompleteResultsParser"));
const Limiter_1 = __importDefault(require("../utils/Limiter"));
var AutocompleteItemType;
(function (AutocompleteItemType) {
    AutocompleteItemType["Tag"] = "Tag";
    AutocompleteItemType["Location"] = "Location";
})(AutocompleteItemType = exports.AutocompleteItemType || (exports.AutocompleteItemType = {}));
class AutocompleteAPI {
    static getSuggestions(params) {
        if (params.itemType === AutocompleteItemType.Tag) {
            return this.getAutocompleteTags(params);
        }
        return this.getAutocompleteLocations(params);
    }
    /**
     * @internal
     */
    static async getAutocompleteTags(params) {
        const payload = {
            search_term: params.query,
            count: params.limit || 5
        };
        const json = await (0, Fetch_1.fetchPage)(Constants_1.URLS.AUTOCOMPLETE.TAG, true, Fetch_1.FetchMethod.POST, payload);
        return AutocompleteResultsParser_1.default.parseTags(json);
    }
    /**
     * @internal
     */
    static async getAutocompleteLocations(params) {
        const payload = {
            q: params.query,
            n: params.limit || 5,
            geocoder_fallback: true
        };
        const json = await (0, Fetch_1.fetchPage)(Constants_1.URLS.AUTOCOMPLETE.LOCATION, true, Fetch_1.FetchMethod.POST, payload);
        return AutocompleteResultsParser_1.default.parseLocations(json);
    }
}
exports.default = AutocompleteAPI;
class LimiterAutocompleteAPI extends AutocompleteAPI {
    static getSuggestions(params) {
        return Limiter_1.default.schedule(() => super.getSuggestions(params));
    }
}
exports.LimiterAutocompleteAPI = LimiterAutocompleteAPI;
//# sourceMappingURL=AutocompleteAPI.js.map