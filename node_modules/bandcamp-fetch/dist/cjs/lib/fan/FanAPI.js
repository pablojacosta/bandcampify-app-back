"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LimiterFanAPI = void 0;
const ImageAPI_1 = __importDefault(require("../image/ImageAPI"));
const Constants_1 = require("../utils/Constants");
const Fetch_1 = require("../utils/Fetch");
const FanCollectionParser_1 = __importDefault(require("./FanCollectionParser"));
const FanFollowingParser_1 = __importDefault(require("./FanFollowingParser"));
const FanInfoParser_1 = __importDefault(require("./FanInfoParser"));
const FanWishlistParser_1 = __importDefault(require("./FanWishlistParser"));
const Limiter_1 = __importDefault(require("../utils/Limiter"));
class FanAPI {
    static async getInfo(params) {
        const imageConstants = await ImageAPI_1.default.getConstants();
        const fanPageUrl = this.getFanPageUrl(params.username);
        const opts = {
            imageBaseUrl: imageConstants.baseUrl,
            imageFormat: await ImageAPI_1.default.getFormat(params.imageFormat, 20)
        };
        const html = await (0, Fetch_1.fetchPage)(fanPageUrl);
        return FanInfoParser_1.default.parseInfo(html, opts);
    }
    static async getCollection(params) {
        return await this.getItems({
            ...params,
            defaultImageFormat: 9,
            continuationUrl: Constants_1.URLS.FAN_CONTINUATION.COLLECTION,
            parsePageFn: FanCollectionParser_1.default.parseCollectionFromPage.bind(FanCollectionParser_1.default),
            parseContinuationFn: FanCollectionParser_1.default.parseCollectionFromContinuation.bind(FanCollectionParser_1.default)
        });
    }
    static async getWishlist(params) {
        return await this.getItems({
            ...params,
            defaultImageFormat: 9,
            continuationUrl: Constants_1.URLS.FAN_CONTINUATION.WISHLIST,
            parsePageFn: FanWishlistParser_1.default.parseWishlistFromPage.bind(FanWishlistParser_1.default),
            parseContinuationFn: FanWishlistParser_1.default.parseWishlistFromContinuation.bind(FanWishlistParser_1.default)
        });
    }
    static async getFollowingArtistsAndLabels(params) {
        return await this.getItems({
            ...params,
            defaultImageFormat: 21,
            continuationUrl: Constants_1.URLS.FAN_CONTINUATION.FOLLOWING_BANDS,
            parsePageFn: FanFollowingParser_1.default.parseFollowingBandsFromPage.bind(FanFollowingParser_1.default),
            parseContinuationFn: FanFollowingParser_1.default.parseFollowingBandsFromContinuation.bind(FanFollowingParser_1.default)
        });
    }
    static async getFollowingGenres(params) {
        return await this.getItems({
            ...params,
            defaultImageFormat: 3,
            continuationUrl: Constants_1.URLS.FAN_CONTINUATION.FOLLOWING_GENRES,
            parsePageFn: FanFollowingParser_1.default.parseFollowingGenresFromPage.bind(FanFollowingParser_1.default),
            parseContinuationFn: FanFollowingParser_1.default.parseFollowingGenresFromContinuation.bind(FanFollowingParser_1.default)
        });
    }
    /**
     * @internal
     */
    static async getItems(params) {
        const { target, imageFormat, defaultImageFormat, continuationUrl } = params;
        const imageConstants = await ImageAPI_1.default.getConstants();
        const opts = {
            imageBaseUrl: imageConstants.baseUrl,
            imageFormat: await ImageAPI_1.default.getFormat(imageFormat, defaultImageFormat)
        };
        if (!this.isContinuation(target)) {
            const fanPageUrl = this.getFanPageUrl(target);
            const html = await (0, Fetch_1.fetchPage)(fanPageUrl);
            return params.parsePageFn(html, opts);
        }
        // Continuation
        if (!continuationUrl) {
            throw new Fetch_1.FetchError('Unable to fetch fan contents: target is continuation token but continuation URL is missing.');
        }
        const continuation = target;
        const payload = {
            fan_id: continuation.fanId,
            older_than_token: continuation.token,
            count: 20
        };
        const json = await (0, Fetch_1.fetchPage)(continuationUrl, true, Fetch_1.FetchMethod.POST, payload);
        return params.parseContinuationFn(json, continuation, opts);
    }
    /**
     * @internal
    */
    static getFanPageUrl(username) {
        return `${Constants_1.URLS.SITE_URL}/${username}`;
    }
    /**
     * @internal
    */
    static isContinuation(target) {
        return typeof target === 'object' && target.fanId && target.token;
    }
}
exports.default = FanAPI;
class LimiterFanAPI extends FanAPI {
    static async getInfo(params) {
        return Limiter_1.default.schedule(() => super.getInfo(params));
    }
    static async getCollection(params) {
        return Limiter_1.default.schedule(() => super.getCollection(params));
    }
    static async getWishlist(params) {
        return Limiter_1.default.schedule(() => super.getWishlist(params));
    }
    static async getFollowingArtistsAndLabels(params) {
        return Limiter_1.default.schedule(() => super.getFollowingArtistsAndLabels(params));
    }
    static async getFollowingGenres(params) {
        return Limiter_1.default.schedule(() => super.getFollowingGenres(params));
    }
}
exports.LimiterFanAPI = LimiterFanAPI;
//# sourceMappingURL=FanAPI.js.map