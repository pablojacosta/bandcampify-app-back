{"version":3,"file":"TrackAPI.js","sourceRoot":"","sources":["../../../../src/lib/track/TrackAPI.ts"],"names":[],"mappings":";;;;;;AAAA,iEAAyC;AAGzC,0CAA2C;AAC3C,+DAAuC;AACvC,wEAAgD;AAShD,MAAqB,QAAQ;IAC3B,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAA6B;QAChD,MAAM,cAAc,GAAG,MAAM,kBAAQ,CAAC,YAAY,EAAE,CAAC;QACrD,MAAM,IAAI,GAAG;YACX,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,YAAY,EAAE,cAAc,CAAC,OAAO;YACpC,gBAAgB,EAAE,MAAM,kBAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC;YACtE,iBAAiB,EAAE,MAAM,kBAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,iBAAiB,EAAE,EAAE,CAAC;YACzE,cAAc,EAAE,MAAM,CAAC,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK;SACpF,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,IAAA,iBAAS,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC9C,OAAO,yBAAe,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;CACF;AAbD,2BAaC;AAED,MAAa,eAAgB,SAAQ,QAAQ;IAC3C,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAA6B;QAChD,OAAO,iBAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;IACvD,CAAC;CACF;AAJD,0CAIC","sourcesContent":["import ImageAPI from '../image/ImageAPI';\nimport { ImageFormat } from '../types/Image';\nimport Track from '../types/Track';\nimport { fetchPage } from '../utils/Fetch';\nimport Limiter from '../utils/Limiter';\nimport TrackInfoParser from './TrackInfoParser';\n\nexport interface TrackAPIGetInfoParams {\n  trackUrl: string;\n  albumImageFormat?: string | number | ImageFormat;\n  artistImageFormat?: string | number | ImageFormat;\n  includeRawData?: boolean;\n}\n\nexport default class TrackAPI {\n  static async getInfo(params: TrackAPIGetInfoParams): Promise<Track> {\n    const imageConstants = await ImageAPI.getConstants();\n    const opts = {\n      trackUrl: params.trackUrl,\n      imageBaseUrl: imageConstants.baseUrl,\n      albumImageFormat: await ImageAPI.getFormat(params.albumImageFormat, 9),\n      artistImageFormat: await ImageAPI.getFormat(params.artistImageFormat, 21),\n      includeRawData: params.includeRawData !== undefined ? params.includeRawData : false\n    };\n    const html = await fetchPage(params.trackUrl);\n    return TrackInfoParser.parseInfo(html, opts);\n  }\n}\n\nexport class LimiterTrackAPI extends TrackAPI {\n  static async getInfo(params: TrackAPIGetInfoParams): Promise<Track> {\n    return Limiter.schedule(() => super.getInfo(params));\n  }\n}\n"]}