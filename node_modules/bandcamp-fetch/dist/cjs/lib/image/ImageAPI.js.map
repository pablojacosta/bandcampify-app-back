{"version":3,"file":"ImageAPI.js","sourceRoot":"","sources":["../../../../src/lib/image/ImageAPI.ts"],"names":[],"mappings":";;;;;;AACA,0CAAsD;AACtD,kDAA0C;AAC1C,0CAA2C;AAC3C,+DAAuC;AACvC,gEAAwC;AAExC,IAAY,iBAKX;AALD,WAAY,iBAAiB;IAC3B,0BAA0B;IAC1B,oCAAe,CAAA;IACf,qCAAqC;IACrC,gCAAW,CAAA;AACb,CAAC,EALW,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAK5B;AAED,MAAqB,QAAQ;IAE3B;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,YAAY;QACvB,OAAO,aAAK,CAAC,QAAQ,CAAC,qBAAa,CAAC,SAAS,EAAE,gBAAgB,EAAE,KAAK,IAAI,EAAE;YAC1E,MAAM,IAAI,GAAG,MAAM,IAAA,iBAAS,EAAC,gBAAI,CAAC,QAAQ,CAAC,CAAC;YAC5C,OAAO,qBAAW,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,MAAsC,EAAE,UAAmB;QAChF,IAAI,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,CAAC,EAAE,KAAK,SAAS,IAAI,MAAM,CAAC,IAAI,EAAE;YAClF,OAAO,MAAM,CAAC;SACf;QACD,IAAI,MAAM,CAAC;QACX,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;YACjD,MAAM,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CAClC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC;gBAChE,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,EAAE,KAAK,MAAM,CAAC,CAAC,IAAI,IAAI,CAAC;SACjE;QACD,IAAI,MAAM,EAAE;YACV,OAAO,MAAM,CAAC;SACf;QACD,IAAI,UAAU,KAAK,SAAS,EAAE;YAC5B,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;SACnC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAA0B;QAChD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QAC5C,IAAI,MAAM,KAAK,iBAAiB,CAAC,KAAK,EAAE;YACtC,OAAO,SAAS,CAAC,OAAO,CAAC,MAAM,CAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAE,CAAC;SACrE;aACI,IAAI,MAAM,KAAK,iBAAiB,CAAC,GAAG,EAAE;YACzC,OAAO,SAAS,CAAC,OAAO,CAAC,MAAM,CAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAE,CAAC;SACrE;QAED,OAAO,SAAS,CAAC,OAAO,CAAC;IAC3B,CAAC;CACF;AA3CD,2BA2CC;AAED,MAAa,eAAgB,SAAQ,QAAQ;IAE3C,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAsC;QAC5D,OAAO,iBAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;IAC1D,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,MAAkD,EAAE,UAA+B;QACxG,OAAO,iBAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC;IACrE,CAAC;CACF;AATD,0CASC","sourcesContent":["import { ImageConstants, ImageFormat } from '../types/Image';\nimport { Cache, CacheDataType } from '../utils/Cache';\nimport { URLS } from '../utils/Constants';\nimport { fetchPage } from '../utils/Fetch';\nimport Limiter from '../utils/Limiter';\nimport ImageParser from './ImageParser';\n\nexport enum ImageFormatFilter {\n  /** Album image formats */\n  Album = 'album',\n  /** Artist / Profile image formats */\n  Bio = 'bio'\n}\n\nexport default class ImageAPI {\n\n  /**\n   * @internal\n   */\n  static async getConstants(): Promise<ImageConstants> {\n    return Cache.getOrSet(CacheDataType.Constants, 'imageConstants', async () => {\n      const html = await fetchPage(URLS.SITE_URL);\n      return ImageParser.parseImageConstants(html);\n    });\n  }\n\n  static async getFormat(target?: string | number | ImageFormat, fallbackId?: number): Promise<ImageFormat | null> {\n    if (target && typeof target === 'object' && target.id !== undefined && target.name) {\n      return target;\n    }\n    let format;\n    if (target !== undefined) {\n      const imageConstants = await this.getConstants();\n      format = imageConstants.formats.find(\n        (format) => (typeof target === 'string' && format.name === target) ||\n          (Number.isInteger(target) && format.id === target)) || null;\n    }\n    if (format) {\n      return format;\n    }\n    if (fallbackId !== undefined) {\n      return this.getFormat(fallbackId);\n    }\n    return null;\n  }\n\n  static async getFormats(filter?: ImageFormatFilter): Promise<ImageFormat[]> {\n    const constants = await this.getConstants();\n    if (filter === ImageFormatFilter.Album) {\n      return constants.formats.filter( (c) => c.name.startsWith('art_') );\n    }\n    else if (filter === ImageFormatFilter.Bio) {\n      return constants.formats.filter( (c) => c.name.startsWith('bio_') );\n    }\n\n    return constants.formats;\n  }\n}\n\nexport class LimiterImageAPI extends ImageAPI {\n\n  static async getFormats(filter?: ImageFormatFilter | undefined): Promise<ImageFormat[]> {\n    return Limiter.schedule(() => super.getFormats(filter));\n  }\n\n  static async getFormat(target?: string | number | ImageFormat | undefined, fallbackId?: number | undefined): Promise<ImageFormat | null> {\n    return Limiter.schedule(() => super.getFormat(target, fallbackId));\n  }\n}\n"]}