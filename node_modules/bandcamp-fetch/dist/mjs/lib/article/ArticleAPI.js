import ImageAPI from '../image/ImageAPI';
import { URLS } from '../utils/Constants';
import { fetchPage } from '../utils/Fetch';
import Limiter from '../utils/Limiter';
import { normalizeUrl } from '../utils/Parse';
import ArticleCategoryParser from './ArticleCategoryParser';
import ArticleListParser from './ArticleListParser';
import ArticleParser from './ArticleParser';
export default class ArticleAPI {
    static async getCategories() {
        const html = await fetchPage(URLS.DAILY);
        return ArticleCategoryParser.parseCategories(html);
    }
    static async getArticle(params) {
        const imageConstants = await ImageAPI.getConstants();
        const opts = {
            imageBaseUrl: imageConstants.baseUrl,
            albumImageFormat: await ImageAPI.getFormat(params.albumImageFormat, 9),
            artistImageFormat: await ImageAPI.getFormat(params.artistImageFormat, 21),
            includeRawData: !!params.includeRawData
        };
        const html = await fetchPage(params.articleUrl);
        return ArticleParser.parseArticle(html, opts);
    }
    static async list(params) {
        let url = params?.categoryUrl ? params.categoryUrl : normalizeUrl('latest', URLS.DAILY);
        if (params?.page) {
            url += `?page=${params.page}`;
        }
        const opts = {
            imageFormat: await ImageAPI.getFormat(params?.imageFormat)
        };
        const html = await fetchPage(url);
        return ArticleListParser.parseList(html, opts);
    }
}
export class LimiterArticleAPI extends ArticleAPI {
    static async getCategories() {
        return Limiter.schedule(() => super.getCategories());
    }
    static async getArticle(params) {
        return Limiter.schedule(() => super.getArticle(params));
    }
}
//# sourceMappingURL=ArticleAPI.js.map