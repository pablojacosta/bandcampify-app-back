import ImageAPI from '../image/ImageAPI';
import { URLS } from '../utils/Constants';
import { FetchError, FetchMethod, fetchPage } from '../utils/Fetch';
import FanCollectionParser from './FanCollectionParser';
import FanFollowingParser from './FanFollowingParser';
import FanInfoParser from './FanInfoParser';
import FanWishlistParser from './FanWishlistParser';
import Limiter from '../utils/Limiter';
export default class FanAPI {
    static async getInfo(params) {
        const imageConstants = await ImageAPI.getConstants();
        const fanPageUrl = this.getFanPageUrl(params.username);
        const opts = {
            imageBaseUrl: imageConstants.baseUrl,
            imageFormat: await ImageAPI.getFormat(params.imageFormat, 20)
        };
        const html = await fetchPage(fanPageUrl);
        return FanInfoParser.parseInfo(html, opts);
    }
    static async getCollection(params) {
        return await this.getItems({
            ...params,
            defaultImageFormat: 9,
            continuationUrl: URLS.FAN_CONTINUATION.COLLECTION,
            parsePageFn: FanCollectionParser.parseCollectionFromPage.bind(FanCollectionParser),
            parseContinuationFn: FanCollectionParser.parseCollectionFromContinuation.bind(FanCollectionParser)
        });
    }
    static async getWishlist(params) {
        return await this.getItems({
            ...params,
            defaultImageFormat: 9,
            continuationUrl: URLS.FAN_CONTINUATION.WISHLIST,
            parsePageFn: FanWishlistParser.parseWishlistFromPage.bind(FanWishlistParser),
            parseContinuationFn: FanWishlistParser.parseWishlistFromContinuation.bind(FanWishlistParser)
        });
    }
    static async getFollowingArtistsAndLabels(params) {
        return await this.getItems({
            ...params,
            defaultImageFormat: 21,
            continuationUrl: URLS.FAN_CONTINUATION.FOLLOWING_BANDS,
            parsePageFn: FanFollowingParser.parseFollowingBandsFromPage.bind(FanFollowingParser),
            parseContinuationFn: FanFollowingParser.parseFollowingBandsFromContinuation.bind(FanFollowingParser)
        });
    }
    static async getFollowingGenres(params) {
        return await this.getItems({
            ...params,
            defaultImageFormat: 3,
            continuationUrl: URLS.FAN_CONTINUATION.FOLLOWING_GENRES,
            parsePageFn: FanFollowingParser.parseFollowingGenresFromPage.bind(FanFollowingParser),
            parseContinuationFn: FanFollowingParser.parseFollowingGenresFromContinuation.bind(FanFollowingParser)
        });
    }
    /**
     * @internal
     */
    static async getItems(params) {
        const { target, imageFormat, defaultImageFormat, continuationUrl } = params;
        const imageConstants = await ImageAPI.getConstants();
        const opts = {
            imageBaseUrl: imageConstants.baseUrl,
            imageFormat: await ImageAPI.getFormat(imageFormat, defaultImageFormat)
        };
        if (!this.isContinuation(target)) {
            const fanPageUrl = this.getFanPageUrl(target);
            const html = await fetchPage(fanPageUrl);
            return params.parsePageFn(html, opts);
        }
        // Continuation
        if (!continuationUrl) {
            throw new FetchError('Unable to fetch fan contents: target is continuation token but continuation URL is missing.');
        }
        const continuation = target;
        const payload = {
            fan_id: continuation.fanId,
            older_than_token: continuation.token,
            count: 20
        };
        const json = await fetchPage(continuationUrl, true, FetchMethod.POST, payload);
        return params.parseContinuationFn(json, continuation, opts);
    }
    /**
     * @internal
    */
    static getFanPageUrl(username) {
        return `${URLS.SITE_URL}/${username}`;
    }
    /**
     * @internal
    */
    static isContinuation(target) {
        return typeof target === 'object' && target.fanId && target.token;
    }
}
export class LimiterFanAPI extends FanAPI {
    static async getInfo(params) {
        return Limiter.schedule(() => super.getInfo(params));
    }
    static async getCollection(params) {
        return Limiter.schedule(() => super.getCollection(params));
    }
    static async getWishlist(params) {
        return Limiter.schedule(() => super.getWishlist(params));
    }
    static async getFollowingArtistsAndLabels(params) {
        return Limiter.schedule(() => super.getFollowingArtistsAndLabels(params));
    }
    static async getFollowingGenres(params) {
        return Limiter.schedule(() => super.getFollowingGenres(params));
    }
}
//# sourceMappingURL=FanAPI.js.map