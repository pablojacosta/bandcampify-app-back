{"version":3,"file":"DiscoverOptionsParser.js","sourceRoot":"","sources":["../../../../src/lib/discovery/DiscoverOptionsParser.ts"],"names":[],"mappings":"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","sourcesContent":["import { load as cheerioLoad } from 'cheerio';\nimport { DiscoverOptions } from '../types/Discovery';\nimport { ParseError } from '../utils/Parse';\n\nexport default class DiscoverOptionsParser {\n  static parseOptions(html: string): DiscoverOptions {\n    const $ = cheerioLoad(html);\n    const blob = $('#pagedata[data-blob]').attr('data-blob');\n    if (!blob) {\n      throw new ParseError('Failed to parse discover options: blob not found in data.', html);\n    }\n    let parsed;\n    try {\n      parsed = JSON.parse(blob);\n    }\n    catch (error: any) {\n      throw new ParseError('Failed to parse discover options: JSON error.', blob, error);\n    }\n    const options = parsed?.discover_2015?.options;\n    if (options && typeof options === 'object') {\n      const result: DiscoverOptions = {\n        genres: [],\n        subgenres: {},\n        sortBys: [],\n        artistRecommendationTypes: [],\n        locations: [],\n        formats: [],\n        times: []\n      };\n      if (Array.isArray(options.r)) {\n        result.artistRecommendationTypes = options.r.map((r: any) => ({ name: r.name, value: r.value }));\n      }\n      if (Array.isArray(options.l)) {\n        result.locations = options.l.map((l: any) => ({ name: l.name, value: l.value }));\n      }\n      if (Array.isArray(options.w)) {\n        result.times = options.w.map((w: any) => ({ name: w.name, value: w.value, title: w.title }));\n      }\n      if (Array.isArray(options.f)) {\n        result.formats = options.f.map((f: any) => ({ name: f.name, value: f.value }));\n      }\n      if (Array.isArray(options.s)) {\n        result.sortBys = options.s.map((s: any) => ({ name: s.name, value: s.value }));\n      }\n      if (typeof options.t === 'object') {\n        for (const [ genre, subgenres ] of Object.entries(options.t)) {\n          if (Array.isArray(subgenres)) {\n            result.subgenres[genre] = subgenres.map((sg: any) => ({ name: sg.name, value: sg.value }));\n          }\n        }\n      }\n      if (Array.isArray(options.g)) {\n        result.genres = options.g.map((g: any) => ({ name: g.name, value: g.value }));\n      }\n      return result;\n    }\n\n    throw new ParseError('Failed to parse discover options: blob is missing or has invalid \\'discover_2015.options\\' field.', parsed);\n  }\n}\n"]}