"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cheerio_1 = require("cheerio");
const html_entities_1 = require("html-entities");
const Parse_1 = require("../utils/Parse");
class TagInfoParser {
    static parseInfo(html, tagUrl) {
        const $ = (0, cheerio_1.load)(html);
        const blob = (0, html_entities_1.decode)($('#pagedata[data-blob]').attr('data-blob'));
        let parsed;
        try {
            parsed = JSON.parse(blob);
        }
        catch (error) {
            throw new Parse_1.ParseError('Failed to parse tag info: JSON error in data-blob.', html, error);
        }
        if (typeof parsed?.hub === 'object') {
            const tag = {
                type: 'tag',
                name: parsed.hub.name,
                url: tagUrl,
                value: parsed.hub.norm_name,
                related: []
            };
            if (Array.isArray(parsed.hub.related_tags)) {
                tag.related = parsed.hub.related_tags.map((related) => ({
                    type: 'tag',
                    name: related.name,
                    url: (0, Parse_1.normalizeUrl)(related.url),
                    value: related.norm_name,
                    isLocation: related.isloc
                }));
            }
            return tag;
        }
        throw new Parse_1.ParseError('Failed to parse tag info: hub data missing or invalid.', html);
    }
}
exports.default = TagInfoParser;
//# sourceMappingURL=TagInfoParser.js.map