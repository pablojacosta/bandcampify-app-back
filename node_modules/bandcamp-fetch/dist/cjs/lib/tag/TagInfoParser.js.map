{"version":3,"file":"TagInfoParser.js","sourceRoot":"","sources":["../../../../src/lib/tag/TagInfoParser.ts"],"names":[],"mappings":";;AAAA,qCAA8C;AAC9C,iDAAuC;AAEvC,0CAA0D;AAE1D,MAAqB,aAAa;IAEhC,MAAM,CAAC,SAAS,CAAC,IAAY,EAAE,MAAc;QAC3C,MAAM,CAAC,GAAG,IAAA,cAAW,EAAC,IAAI,CAAC,CAAC;QAC5B,MAAM,IAAI,GAAG,IAAA,sBAAM,EAAC,CAAC,CAAC,sBAAsB,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;QACjE,IAAI,MAAM,CAAC;QACX,IAAI;YACF,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SAC3B;QACD,OAAO,KAAU,EAAE;YACjB,MAAM,IAAI,kBAAU,CAAC,oDAAoD,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;SACzF;QACD,IAAI,OAAO,MAAM,EAAE,GAAG,KAAK,QAAQ,EAAE;YACnC,MAAM,GAAG,GAAQ;gBACf,IAAI,EAAE,KAAK;gBACX,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI;gBACrB,GAAG,EAAE,MAAM;gBACX,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,SAAS;gBAC3B,OAAO,EAAE,EAAE;aACZ,CAAC;YACF,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;gBAC1C,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,OAAY,EAAE,EAAE,CAAC,CAAC;oBAC3D,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,OAAO,CAAC,IAAI;oBAClB,GAAG,EAAE,IAAA,oBAAY,EAAC,OAAO,CAAC,GAAG,CAAC;oBAC9B,KAAK,EAAE,OAAO,CAAC,SAAS;oBACxB,UAAU,EAAE,OAAO,CAAC,KAAK;iBAC1B,CAAC,CAAC,CAAC;aACL;YACD,OAAO,GAAG,CAAC;SACZ;QAED,MAAM,IAAI,kBAAU,CAAC,wDAAwD,EAAE,IAAI,CAAC,CAAC;IACvF,CAAC;CACF;AAlCD,gCAkCC","sourcesContent":["import { load as cheerioLoad } from 'cheerio';\nimport { decode } from 'html-entities';\nimport Tag from '../types/Tag';\nimport { ParseError, normalizeUrl } from '../utils/Parse';\n\nexport default class TagInfoParser {\n\n  static parseInfo(html: string, tagUrl: string): Tag {\n    const $ = cheerioLoad(html);\n    const blob = decode($('#pagedata[data-blob]').attr('data-blob'));\n    let parsed;\n    try {\n      parsed = JSON.parse(blob);\n    }\n    catch (error: any) {\n      throw new ParseError('Failed to parse tag info: JSON error in data-blob.', html, error);\n    }\n    if (typeof parsed?.hub === 'object') {\n      const tag: Tag = {\n        type: 'tag',\n        name: parsed.hub.name,\n        url: tagUrl,\n        value: parsed.hub.norm_name,\n        related: []\n      };\n      if (Array.isArray(parsed.hub.related_tags)) {\n        tag.related = parsed.hub.related_tags.map((related: any) => ({\n          type: 'tag',\n          name: related.name,\n          url: normalizeUrl(related.url),\n          value: related.norm_name,\n          isLocation: related.isloc\n        }));\n      }\n      return tag;\n    }\n\n    throw new ParseError('Failed to parse tag info: hub data missing or invalid.', html);\n  }\n}\n"]}