"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LimiterImageAPI = exports.ImageFormatFilter = void 0;
const Cache_1 = require("../utils/Cache");
const Constants_1 = require("../utils/Constants");
const Fetch_1 = require("../utils/Fetch");
const Limiter_1 = __importDefault(require("../utils/Limiter"));
const ImageParser_1 = __importDefault(require("./ImageParser"));
var ImageFormatFilter;
(function (ImageFormatFilter) {
    /** Album image formats */
    ImageFormatFilter["Album"] = "album";
    /** Artist / Profile image formats */
    ImageFormatFilter["Bio"] = "bio";
})(ImageFormatFilter = exports.ImageFormatFilter || (exports.ImageFormatFilter = {}));
class ImageAPI {
    /**
     * @internal
     */
    static async getConstants() {
        return Cache_1.Cache.getOrSet(Cache_1.CacheDataType.Constants, 'imageConstants', async () => {
            const html = await (0, Fetch_1.fetchPage)(Constants_1.URLS.SITE_URL);
            return ImageParser_1.default.parseImageConstants(html);
        });
    }
    static async getFormat(target, fallbackId) {
        if (target && typeof target === 'object' && target.id !== undefined && target.name) {
            return target;
        }
        let format;
        if (target !== undefined) {
            const imageConstants = await this.getConstants();
            format = imageConstants.formats.find((format) => (typeof target === 'string' && format.name === target) ||
                (Number.isInteger(target) && format.id === target)) || null;
        }
        if (format) {
            return format;
        }
        if (fallbackId !== undefined) {
            return this.getFormat(fallbackId);
        }
        return null;
    }
    static async getFormats(filter) {
        const constants = await this.getConstants();
        if (filter === ImageFormatFilter.Album) {
            return constants.formats.filter((c) => c.name.startsWith('art_'));
        }
        else if (filter === ImageFormatFilter.Bio) {
            return constants.formats.filter((c) => c.name.startsWith('bio_'));
        }
        return constants.formats;
    }
}
exports.default = ImageAPI;
class LimiterImageAPI extends ImageAPI {
    static async getFormats(filter) {
        return Limiter_1.default.schedule(() => super.getFormats(filter));
    }
    static async getFormat(target, fallbackId) {
        return Limiter_1.default.schedule(() => super.getFormat(target, fallbackId));
    }
}
exports.LimiterImageAPI = LimiterImageAPI;
//# sourceMappingURL=ImageAPI.js.map