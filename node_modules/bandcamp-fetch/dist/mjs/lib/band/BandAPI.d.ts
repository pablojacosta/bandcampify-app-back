import Album from '../types/Album';
import Artist from '../types/Artist';
import { ImageFormat } from '../types/Image';
import Label, { LabelArtist } from '../types/Label';
import Track from '../types/Track';
export interface BandAPIGetDiscographyParams {
    bandUrl: string;
    imageFormat?: string | number | ImageFormat;
}
export interface BandAPIGetInfoParams {
    bandUrl: string;
    imageFormat?: string | number | ImageFormat;
    labelId?: number;
}
export interface BandAPIGetLabelArtistsParams {
    labelUrl: string;
    imageFormat?: string | number | ImageFormat;
}
export default class BandAPI {
    static getDiscography(params: BandAPIGetDiscographyParams): Promise<Array<Album | Track>>;
    static getInfo(params: BandAPIGetInfoParams): Promise<Artist | Label>;
    static getLabelArtists(params: BandAPIGetLabelArtistsParams): Promise<LabelArtist[]>;
    /**
     * @internal
     */
    protected static getUrl(artistOrLabelUrl: string, path?: string, labelId?: string): string;
    /**
     * @internal
     */
    protected static isInfoComplete(data: Artist | Label): true | "" | Label | undefined;
    /**
     * @internal
     */
    protected static fillInfo<T extends Artist | Label>(target: T, src: T): T;
}
export declare class LimiterBandAPI extends BandAPI {
    static getDiscography(params: BandAPIGetDiscographyParams): Promise<(Album | Track)[]>;
    static getInfo(params: BandAPIGetInfoParams): Promise<Artist | Label>;
    static getLabelArtists(params: BandAPIGetLabelArtistsParams): Promise<LabelArtist[]>;
}
//# sourceMappingURL=BandAPI.d.ts.map