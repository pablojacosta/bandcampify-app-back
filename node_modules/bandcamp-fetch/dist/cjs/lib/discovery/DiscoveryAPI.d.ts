import { DiscoverOptions, DiscoverParams, DiscoverResult } from '../types/Discovery';
interface DiscoverRequestPayload {
    s: string;
    p: number;
    g?: string;
    t?: string;
    gn?: string;
    f?: string;
    r?: string;
    w?: number;
}
export default class DiscoveryAPI {
    static getAvailableOptions(): Promise<DiscoverOptions>;
    static sanitizeDiscoverParams(params?: DiscoverParams): Promise<DiscoverParams>;
    static discover(params?: DiscoverParams): Promise<DiscoverResult>;
    /**
     * @internal
     */
    protected static getDiscoverRequestPayload(params: DiscoverParams): DiscoverRequestPayload;
}
export declare class LimiterDiscoveryAPI extends DiscoveryAPI {
    static getAvailableOptions(): Promise<DiscoverOptions>;
    static sanitizeDiscoverParams(params: DiscoverParams): Promise<DiscoverParams>;
    static discover(params: DiscoverParams): Promise<DiscoverResult>;
}
export {};
//# sourceMappingURL=DiscoveryAPI.d.ts.map