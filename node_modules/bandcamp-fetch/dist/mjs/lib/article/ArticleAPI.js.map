{"version":3,"file":"ArticleAPI.js","sourceRoot":"","sources":["../../../../src/lib/article/ArticleAPI.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,MAAM,mBAAmB,CAAC;AAGzC,OAAO,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AAC1C,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC3C,OAAO,OAAO,MAAM,kBAAkB,CAAC;AACvC,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAC9C,OAAO,qBAAqB,MAAM,yBAAyB,CAAC;AAC5D,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AACpD,OAAO,aAAa,MAAM,iBAAiB,CAAC;AAe5C,MAAM,CAAC,OAAO,OAAO,UAAU;IAE7B,MAAM,CAAC,KAAK,CAAC,aAAa;QACxB,MAAM,IAAI,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,OAAO,qBAAqB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAkC;QACxD,MAAM,cAAc,GAAG,MAAM,QAAQ,CAAC,YAAY,EAAE,CAAC;QACrD,MAAM,IAAI,GAAG;YACX,YAAY,EAAE,cAAc,CAAC,OAAO;YACpC,gBAAgB,EAAE,MAAM,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC;YACtE,iBAAiB,EAAE,MAAM,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,iBAAiB,EAAE,EAAE,CAAC;YACzE,cAAc,EAAE,CAAC,CAAC,MAAM,CAAC,cAAc;SACxC,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAChD,OAAO,aAAa,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAA6B;QAC7C,IAAI,GAAG,GAAG,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACxF,IAAI,MAAM,EAAE,IAAI,EAAE;YAChB,GAAG,IAAI,SAAS,MAAM,CAAC,IAAI,EAAE,CAAC;SAC/B;QACD,MAAM,IAAI,GAAG;YACX,WAAW,EAAE,MAAM,QAAQ,CAAC,SAAS,CAAC,MAAM,EAAE,WAAW,CAAC;SAC3D,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,CAAC;QAClC,OAAO,iBAAiB,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;CACF;AAED,MAAM,OAAO,iBAAkB,SAAQ,UAAU;IAE/C,MAAM,CAAC,KAAK,CAAC,aAAa;QACxB,OAAO,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IACvD,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAkC;QACxD,OAAO,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;IAC1D,CAAC;CACF","sourcesContent":["import ImageAPI from '../image/ImageAPI';\nimport Article, { ArticleCategorySection, ArticleList } from '../types/Article';\nimport { ImageFormat } from '../types/Image';\nimport { URLS } from '../utils/Constants';\nimport { fetchPage } from '../utils/Fetch';\nimport Limiter from '../utils/Limiter';\nimport { normalizeUrl } from '../utils/Parse';\nimport ArticleCategoryParser from './ArticleCategoryParser';\nimport ArticleListParser from './ArticleListParser';\nimport ArticleParser from './ArticleParser';\n\nexport interface ArticleAPIGetArticleParams {\n  articleUrl: string;\n  albumImageFormat?: string | number | ImageFormat;\n  artistImageFormat?: string | number | ImageFormat;\n  includeRawData?: boolean;\n}\n\nexport interface ArticleAPIListParams {\n  categoryUrl?: string;\n  imageFormat?: string | number | ImageFormat;\n  page?: number;\n}\n\nexport default class ArticleAPI {\n\n  static async getCategories(): Promise<ArticleCategorySection[]> {\n    const html = await fetchPage(URLS.DAILY);\n    return ArticleCategoryParser.parseCategories(html);\n  }\n\n  static async getArticle(params: ArticleAPIGetArticleParams): Promise<Article> {\n    const imageConstants = await ImageAPI.getConstants();\n    const opts = {\n      imageBaseUrl: imageConstants.baseUrl,\n      albumImageFormat: await ImageAPI.getFormat(params.albumImageFormat, 9),\n      artistImageFormat: await ImageAPI.getFormat(params.artistImageFormat, 21),\n      includeRawData: !!params.includeRawData\n    };\n    const html = await fetchPage(params.articleUrl);\n    return ArticleParser.parseArticle(html, opts);\n  }\n\n  static async list(params?: ArticleAPIListParams): Promise<ArticleList> {\n    let url = params?.categoryUrl ? params.categoryUrl : normalizeUrl('latest', URLS.DAILY);\n    if (params?.page) {\n      url += `?page=${params.page}`;\n    }\n    const opts = {\n      imageFormat: await ImageAPI.getFormat(params?.imageFormat)\n    };\n    const html = await fetchPage(url);\n    return ArticleListParser.parseList(html, opts);\n  }\n}\n\nexport class LimiterArticleAPI extends ArticleAPI {\n\n  static async getCategories(): Promise<ArticleCategorySection[]> {\n    return Limiter.schedule(() => super.getCategories());\n  }\n\n  static async getArticle(params: ArticleAPIGetArticleParams): Promise<Article> {\n    return Limiter.schedule(() => super.getArticle(params));\n  }\n}\n"]}