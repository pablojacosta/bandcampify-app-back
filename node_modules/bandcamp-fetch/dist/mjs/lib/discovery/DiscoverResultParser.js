import { ParseError } from '../utils/Parse';
export default class DiscoverResultParser {
    static parseDiscoverResult(json, opts, resultParams) {
        if (typeof json === 'object' && Array.isArray(json.items)) {
            const items = json.items.filter((item) => item.type === 'a').map((item) => {
                const artist = {
                    type: 'artist',
                    name: item.secondary_text
                };
                const album = {
                    type: 'album',
                    name: item.primary_text,
                    genre: item.genre_text,
                    artist,
                    location: item.location_text
                };
                if (item.url_hints) {
                    artist.url = `https://${item.url_hints.subdomain}.bandcamp.com`;
                }
                if (artist.url) {
                    album.url = `${artist.url}/album/${item.url_hints.slug}`;
                }
                if (item.art_id && opts.albumImageFormat) {
                    album.imageUrl = `${opts.imageBaseUrl}/img/a${item.art_id}_${opts.albumImageFormat.id}.jpg`;
                }
                if (item.featured_track) {
                    album.featuredTrack = {
                        name: item.featured_track.title,
                        duration: item.featured_track.duration,
                        streamUrl: item.featured_track.file?.['mp3-128']
                    };
                }
                if (item.bio_image && opts.artistImageFormat) {
                    artist.imageUrl = `${opts.imageBaseUrl}/img/${item.bio_image.image_id}_${opts.artistImageFormat.id}.jpg`;
                }
                return album;
            });
            return {
                items,
                total: json.total_count,
                params: resultParams
            };
        }
        throw new ParseError('Failed to parse discover results: data is missing or has invalid \'items\' field.', json);
    }
}
//# sourceMappingURL=DiscoverResultParser.js.map