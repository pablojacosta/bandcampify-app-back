{"version":3,"file":"AlbumHighlightsByTagParser.js","sourceRoot":"","sources":["../../../../src/lib/tag/AlbumHighlightsByTagParser.ts"],"names":[],"mappings":";;AAAA,qCAA8C;AAC9C,iDAAuC;AAEvC,0CAA4C;AAS5C,MAAqB,0BAA0B;IAE7C,MAAM,CAAC,eAAe,CAAC,IAAY,EAAE,IAAsC;QACzE,MAAM,CAAC,GAAG,IAAA,cAAW,EAAC,IAAI,CAAC,CAAC;QAC5B,MAAM,IAAI,GAAG,IAAA,sBAAM,EAAC,CAAC,CAAC,sBAAsB,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;QACjE,IAAI,MAAM,CAAC;QACX,IAAI;YACF,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SAC3B;QACD,OAAO,KAAU,EAAE;YACjB,MAAM,IAAI,kBAAU,CAAC,kEAAkE,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;SACvG;QACD,MAAM,WAAW,GAA2B,EAAE,CAAC;QAC/C,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,EAAE;YAEtD,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,UAAe,EAAE,EAAE;gBACzD,IAAI,UAAU,EAAE,IAAI,IAAI,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE;oBACjD,MAAM,aAAa,GAAyB;wBAC1C,IAAI,EAAE,UAAU,CAAC,IAAI;wBACrB,KAAK,EAAE,UAAU,CAAC,MAAM,CAAC,KAAK;wBAC9B,KAAK,EAAE,EAAE;qBACV,CAAC;oBACF,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAS,EAAE,EAAE;wBACrC,IAAI,IAAI,EAAE,SAAS,KAAK,GAAG,EAAE;4BAC3B,MAAM,KAAK,GAAU;gCACnB,IAAI,EAAE,OAAO;gCACb,IAAI,EAAE,IAAI,CAAC,KAAK;gCAChB,GAAG,EAAE,IAAI,CAAC,WAAW;gCACrB,QAAQ,EAAE,EAAE;gCACZ,KAAK,EAAE,IAAI,CAAC,KAAK;gCACjB,MAAM,EAAE;oCACN,IAAI,EAAE,IAAI,CAAC,MAAM;oCACjB,GAAG,EAAE,IAAI,CAAC,QAAQ;iCACnB;6BACF,CAAC;4BACF,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,EAAE;gCACvC,KAAK,CAAC,QAAQ,GAAG,GAAG,IAAI,CAAC,YAAY,SAAS,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,EAAE,MAAM,CAAC;6BACxF;4BACD,IAAI,IAAI,CAAC,oBAAoB,EAAE;gCAC7B,KAAK,CAAC,aAAa,GAAG;oCACpB,IAAI,EAAE,IAAI,CAAC,oBAAoB;oCAC/B,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC;iCACvC,CAAC;6BACH;4BACD,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;yBACjC;oBACH,CAAC,CAAC,CAAC;oBACH,IAAI,aAAa,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;wBAClC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;qBACjC;iBACF;YACH,CAAC,CAAC,CAAC;SACJ;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;CACF;AAvDD,6CAuDC","sourcesContent":["import { load as cheerioLoad } from 'cheerio';\nimport { decode } from 'html-entities';\nimport { ImageFormat } from '../types/Image';\nimport { ParseError } from '../utils/Parse';\nimport { AlbumHighlightsByTag } from '../types/Tag';\nimport Album from '../types/Album';\n\ninterface AlbumHighlightsByTagParseOptions {\n  imageBaseUrl: string;\n  imageFormat: ImageFormat | null;\n}\n\nexport default class AlbumHighlightsByTagParser {\n\n  static parseHighlights(html: string, opts: AlbumHighlightsByTagParseOptions): AlbumHighlightsByTag[] {\n    const $ = cheerioLoad(html);\n    const blob = decode($('#pagedata[data-blob]').attr('data-blob'));\n    let parsed;\n    try {\n      parsed = JSON.parse(blob);\n    }\n    catch (error: any) {\n      throw new ParseError('Failed to parse album highlights by tag: JSON error in data-blob', html, error);\n    }\n    const collections: AlbumHighlightsByTag[] = [];\n    if (Array.isArray(parsed?.hub?.tabs?.[0]?.collections)) {\n\n      parsed.hub.tabs[0].collections.forEach((collection: any) => {\n        if (collection?.name && collection?.render?.title) {\n          const collectionRes: AlbumHighlightsByTag = {\n            name: collection.name,\n            title: collection.render.title,\n            items: []\n          };\n          collection.items.forEach((item: any) => {\n            if (item?.item_type === 'a') {\n              const album: Album = {\n                type: 'album',\n                name: item.title,\n                url: item.tralbum_url,\n                imageUrl: '',\n                genre: item.genre,\n                artist: {\n                  name: item.artist,\n                  url: item.band_url\n                }\n              };\n              if (item.art_id && opts.imageFormat?.id) {\n                album.imageUrl = `${opts.imageBaseUrl}/img/a${item.art_id}_${opts.imageFormat.id}.jpg`;\n              }\n              if (item.featured_track_title) {\n                album.featuredTrack = {\n                  name: item.featured_track_title,\n                  streamUrl: item.audio_url?.['mp3-128']\n                };\n              }\n              collectionRes.items.push(album);\n            }\n          });\n          if (collectionRes.items.length > 0) {\n            collections.push(collectionRes);\n          }\n        }\n      });\n    }\n    return collections;\n  }\n}\n"]}