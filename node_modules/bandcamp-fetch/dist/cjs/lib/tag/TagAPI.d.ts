import { ImageFormat } from '../types/Image';
import Tag, { AlbumHighlightsByTag, ReleasesByTag, TagList } from '../types/Tag';
export interface TagAPIGetAlbumHighlightsParams {
    tagUrl: string;
    imageFormat?: string | number | ImageFormat;
}
export interface TagAPIGetReleasesParams {
    tagUrl: string;
    imageFormat?: string | number | ImageFormat;
    useHardcodedDefaultFilters?: boolean;
    filters?: Record<string, string | number | Array<string | number>>;
    page?: number;
}
export default class TagAPI {
    static list(): Promise<TagList>;
    static getInfo(tagUrl: string): Promise<Tag>;
    static getAlbumHighlights(params: TagAPIGetAlbumHighlightsParams): Promise<AlbumHighlightsByTag[]>;
    static getReleasesAvailableFilters(tagUrl: string): Promise<ReleasesByTag.Filter[]>;
    static getReleases(params: TagAPIGetReleasesParams): Promise<ReleasesByTag>;
    /**
     * @internal
     */
    protected static getReleaseFilterValueNames(tagUrl: string): Promise<ReleasesByTag.FilterValueNames>;
}
export declare class LimiterTagAPI extends TagAPI {
    static list(): Promise<TagList>;
    static getInfo(tagUrl: string): Promise<Tag>;
    static getAlbumHighlights(params: TagAPIGetAlbumHighlightsParams): Promise<AlbumHighlightsByTag[]>;
    static getReleasesAvailableFilters(tagUrl: string): Promise<ReleasesByTag.Filter[]>;
    static getReleases(params: TagAPIGetReleasesParams): Promise<ReleasesByTag>;
}
//# sourceMappingURL=TagAPI.d.ts.map