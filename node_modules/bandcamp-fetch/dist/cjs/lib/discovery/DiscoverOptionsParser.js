"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cheerio_1 = require("cheerio");
const Parse_1 = require("../utils/Parse");
class DiscoverOptionsParser {
    static parseOptions(html) {
        const $ = (0, cheerio_1.load)(html);
        const blob = $('#pagedata[data-blob]').attr('data-blob');
        if (!blob) {
            throw new Parse_1.ParseError('Failed to parse discover options: blob not found in data.', html);
        }
        let parsed;
        try {
            parsed = JSON.parse(blob);
        }
        catch (error) {
            throw new Parse_1.ParseError('Failed to parse discover options: JSON error.', blob, error);
        }
        const options = parsed?.discover_2015?.options;
        if (options && typeof options === 'object') {
            const result = {
                genres: [],
                subgenres: {},
                sortBys: [],
                artistRecommendationTypes: [],
                locations: [],
                formats: [],
                times: []
            };
            if (Array.isArray(options.r)) {
                result.artistRecommendationTypes = options.r.map((r) => ({ name: r.name, value: r.value }));
            }
            if (Array.isArray(options.l)) {
                result.locations = options.l.map((l) => ({ name: l.name, value: l.value }));
            }
            if (Array.isArray(options.w)) {
                result.times = options.w.map((w) => ({ name: w.name, value: w.value, title: w.title }));
            }
            if (Array.isArray(options.f)) {
                result.formats = options.f.map((f) => ({ name: f.name, value: f.value }));
            }
            if (Array.isArray(options.s)) {
                result.sortBys = options.s.map((s) => ({ name: s.name, value: s.value }));
            }
            if (typeof options.t === 'object') {
                for (const [genre, subgenres] of Object.entries(options.t)) {
                    if (Array.isArray(subgenres)) {
                        result.subgenres[genre] = subgenres.map((sg) => ({ name: sg.name, value: sg.value }));
                    }
                }
            }
            if (Array.isArray(options.g)) {
                result.genres = options.g.map((g) => ({ name: g.name, value: g.value }));
            }
            return result;
        }
        throw new Parse_1.ParseError('Failed to parse discover options: blob is missing or has invalid \'discover_2015.options\' field.', parsed);
    }
}
exports.default = DiscoverOptionsParser;
//# sourceMappingURL=DiscoverOptionsParser.js.map