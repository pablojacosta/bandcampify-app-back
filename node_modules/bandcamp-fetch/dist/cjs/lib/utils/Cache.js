"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _CacheImpl_instances, _CacheImpl_ttl, _CacheImpl_maxEntries, _CacheImpl_cache, _CacheImpl_getCacheKey;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cache = exports.CacheDataType = void 0;
const node_cache_1 = __importDefault(require("node-cache"));
var CacheDataType;
(function (CacheDataType) {
    CacheDataType["Page"] = "Page";
    CacheDataType["Constants"] = "Constants";
})(CacheDataType = exports.CacheDataType || (exports.CacheDataType = {}));
class CacheImpl {
    constructor(ttl, maxEntries) {
        _CacheImpl_instances.add(this);
        _CacheImpl_ttl.set(this, void 0);
        _CacheImpl_maxEntries.set(this, void 0);
        _CacheImpl_cache.set(this, void 0);
        __classPrivateFieldSet(this, _CacheImpl_ttl, ttl, "f");
        __classPrivateFieldSet(this, _CacheImpl_maxEntries, maxEntries, "f");
        __classPrivateFieldSet(this, _CacheImpl_cache, new node_cache_1.default({
            checkperiod: 600
        }), "f");
    }
    setTTL(type, ttl) {
        if (__classPrivateFieldGet(this, _CacheImpl_ttl, "f")[type] !== ttl) {
            this.getKeys(type).forEach((key) => {
                __classPrivateFieldGet(this, _CacheImpl_cache, "f").ttl(key, ttl);
            });
            __classPrivateFieldGet(this, _CacheImpl_ttl, "f")[type] = ttl;
        }
    }
    setMaxEntries(type, maxEntries) {
        this.reduceEntries(type, maxEntries);
        __classPrivateFieldGet(this, _CacheImpl_maxEntries, "f")[type] = maxEntries;
    }
    getMaxEntries(type) {
        return __classPrivateFieldGet(this, _CacheImpl_maxEntries, "f")[type] !== undefined ? __classPrivateFieldGet(this, _CacheImpl_maxEntries, "f")[type] : -1;
    }
    get(type, key) {
        return __classPrivateFieldGet(this, _CacheImpl_cache, "f").get(__classPrivateFieldGet(this, _CacheImpl_instances, "m", _CacheImpl_getCacheKey).call(this, type, key));
    }
    put(type, key, value) {
        const maxEntries = this.getMaxEntries(type);
        if (maxEntries === 0) {
            return false;
        }
        else if (maxEntries > 0) {
            this.reduceEntries(type, maxEntries - 1);
        }
        return __classPrivateFieldGet(this, _CacheImpl_cache, "f").set(__classPrivateFieldGet(this, _CacheImpl_instances, "m", _CacheImpl_getCacheKey).call(this, type, key), value, __classPrivateFieldGet(this, _CacheImpl_ttl, "f")[type]);
    }
    reduceEntries(type, reduceTo) {
        if (reduceTo === undefined) {
            reduceTo = this.getMaxEntries(type);
        }
        const keys = this.getKeys(type);
        if (keys.length > reduceTo) {
            for (let i = 0; i < keys.length - reduceTo; i++) {
                __classPrivateFieldGet(this, _CacheImpl_cache, "f").del(keys[i]);
            }
        }
    }
    getKeys(type) {
        return __classPrivateFieldGet(this, _CacheImpl_cache, "f").keys().filter((key) => key.startsWith(`${type}.`));
    }
    clear(type) {
        if (!type) {
            __classPrivateFieldGet(this, _CacheImpl_cache, "f").flushAll();
        }
        else {
            this.getKeys(type).forEach((key) => {
                __classPrivateFieldGet(this, _CacheImpl_cache, "f").del(key);
            });
        }
    }
    async getOrSet(type, key, promiseCallback) {
        const cachedValue = this.get(type, key);
        if (cachedValue !== undefined) {
            return cachedValue;
        }
        const value = await promiseCallback();
        this.put(type, key, value);
        return value;
    }
}
_CacheImpl_ttl = new WeakMap(), _CacheImpl_maxEntries = new WeakMap(), _CacheImpl_cache = new WeakMap(), _CacheImpl_instances = new WeakSet(), _CacheImpl_getCacheKey = function _CacheImpl_getCacheKey(type, key) {
    return `${type}.${key}`;
};
exports.Cache = new CacheImpl({
    [CacheDataType.Constants]: 3600,
    [CacheDataType.Page]: 300
}, { page: 10 });
//# sourceMappingURL=Cache.js.map