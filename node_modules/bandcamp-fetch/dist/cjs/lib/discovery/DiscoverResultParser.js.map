{"version":3,"file":"DiscoverResultParser.js","sourceRoot":"","sources":["../../../../src/lib/discovery/DiscoverResultParser.ts"],"names":[],"mappings":";;AAIA,0CAA4C;AAQ5C,MAAqB,oBAAoB;IAEvC,MAAM,CAAC,mBAAmB,CAAC,IAAS,EAAE,IAAgC,EAAE,YAA4B;QAClG,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACzD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAC7B,CAAC,IAAS,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAS,EAAE,EAAE;gBACpD,MAAM,MAAM,GAAW;oBACrB,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,IAAI,CAAC,cAAc;iBAC1B,CAAC;gBACF,MAAM,KAAK,GAAU;oBACnB,IAAI,EAAE,OAAO;oBACb,IAAI,EAAE,IAAI,CAAC,YAAY;oBACvB,KAAK,EAAE,IAAI,CAAC,UAAU;oBACtB,MAAM;oBACN,QAAQ,EAAE,IAAI,CAAC,aAAa;iBAC7B,CAAC;gBACF,IAAI,IAAI,CAAC,SAAS,EAAE;oBAClB,MAAM,CAAC,GAAG,GAAG,WAAW,IAAI,CAAC,SAAS,CAAC,SAAS,eAAe,CAAC;iBACjE;gBACD,IAAI,MAAM,CAAC,GAAG,EAAE;oBACd,KAAK,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,GAAG,UAAU,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;iBAC1D;gBACD,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,gBAAgB,EAAE;oBACxC,KAAK,CAAC,QAAQ,GAAG,GAAG,IAAI,CAAC,YAAY,SAAS,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,gBAAgB,CAAC,EAAE,MAAM,CAAC;iBAC7F;gBACD,IAAI,IAAI,CAAC,cAAc,EAAE;oBACvB,KAAK,CAAC,aAAa,GAAG;wBACpB,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK;wBAC/B,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,QAAQ;wBACtC,SAAS,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,SAAS,CAAC;qBACjD,CAAC;iBACH;gBACD,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,iBAAiB,EAAE;oBAC5C,MAAM,CAAC,QAAQ,GAAG,GAAG,IAAI,CAAC,YAAY,QAAQ,IAAI,CAAC,SAAS,CAAC,QAAQ,IAAI,IAAI,CAAC,iBAAiB,CAAC,EAAE,MAAM,CAAC;iBAC1G;gBACD,OAAO,KAAK,CAAC;YACf,CAAC,CAAY,CAAC;YAEd,OAAO;gBACL,KAAK;gBACL,KAAK,EAAE,IAAI,CAAC,WAAW;gBACvB,MAAM,EAAE,YAAY;aACrB,CAAC;SACH;QAED,MAAM,IAAI,kBAAU,CAAC,mFAAmF,EAAE,IAAI,CAAC,CAAC;IAClH,CAAC;CACF;AAhDD,uCAgDC","sourcesContent":["import Album from '../types/Album';\nimport Artist from '../types/Artist';\nimport { DiscoverParams, DiscoverResult } from '../types/Discovery';\nimport { ImageFormat } from '../types/Image';\nimport { ParseError } from '../utils/Parse';\n\ninterface DiscoverResultParseOptions {\n  imageBaseUrl: string;\n  albumImageFormat: ImageFormat | null;\n  artistImageFormat: ImageFormat | null;\n}\n\nexport default class DiscoverResultParser {\n\n  static parseDiscoverResult(json: any, opts: DiscoverResultParseOptions, resultParams: DiscoverParams): DiscoverResult {\n    if (typeof json === 'object' && Array.isArray(json.items)) {\n      const items = json.items.filter(\n        (item: any) => item.type === 'a').map((item: any) => {\n        const artist: Artist = {\n          type: 'artist',\n          name: item.secondary_text\n        };\n        const album: Album = {\n          type: 'album',\n          name: item.primary_text,\n          genre: item.genre_text,\n          artist,\n          location: item.location_text\n        };\n        if (item.url_hints) {\n          artist.url = `https://${item.url_hints.subdomain}.bandcamp.com`;\n        }\n        if (artist.url) {\n          album.url = `${artist.url}/album/${item.url_hints.slug}`;\n        }\n        if (item.art_id && opts.albumImageFormat) {\n          album.imageUrl = `${opts.imageBaseUrl}/img/a${item.art_id}_${opts.albumImageFormat.id}.jpg`;\n        }\n        if (item.featured_track) {\n          album.featuredTrack = {\n            name: item.featured_track.title,\n            duration: item.featured_track.duration,\n            streamUrl: item.featured_track.file?.['mp3-128']\n          };\n        }\n        if (item.bio_image && opts.artistImageFormat) {\n          artist.imageUrl = `${opts.imageBaseUrl}/img/${item.bio_image.image_id}_${opts.artistImageFormat.id}.jpg`;\n        }\n        return album;\n      }) as Album[];\n\n      return {\n        items,\n        total: json.total_count,\n        params: resultParams\n      };\n    }\n\n    throw new ParseError('Failed to parse discover results: data is missing or has invalid \\'items\\' field.', json);\n  }\n}\n"]}